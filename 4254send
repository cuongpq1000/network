#!/usr/bin/python3 -u
#


import sys
import socket
import time
import datetime
import select
import json

from base64 import b64encode

MSG_SIZE = 1500
DATA_SIZE = 1000
TIMEOUT = 0.5
SEQUENCE = 0
list_packets = []

# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

time.sleep(0.5)

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.settimeout(TIMEOUT)

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " 4254send: " + string + "\n")

def send_next_packet():
  global SEQUENCE
  success = False
  data = sys.stdin.buffer.read(DATA_SIZE)
  if (len(data) > 0):
    msg = json.dumps({"sequence": SEQUENCE, "data": b64encode(data).decode(), "ack": False, "eof": False, "resend": False, "data length": len(data)})
    list_packets.append(msg)
    if sock.sendto(msg.encode(), dest) < len(msg):
      log("[error] unable to fully send packet")
      success = False
    else:
      log("[send data] " + str(SEQUENCE) + " (" + str(len(data)) + ")")
      success = True
  else:
    log("there is no data to read")
  if success:
    SEQUENCE = SEQUENCE + len(data)
  return success
  

# # Send first packet
send_next_packet()

# Now read in data, send packets
while True:
  log("ABOUT TO SLEEP")
  try:
    result = sock.recvfrom(MSG_SIZE)
  except socket.timeout:
    result = None
  if result:
    (data, addr) = result
    try:
      decoded = json.loads(data.decode())
      log("[recv pkt] " + str(decoded))
      log("[recv ack] " + str(decoded['ack']))
      print(decoded['ack'])
      print(SEQUENCE)
      # If there is an ack, send next packet
      if decoded['ack'] == SEQUENCE:
        # Try to send next packet; break if no more data
        if (not send_next_packet()):
          break
    except (ValueError, KeyError, TypeError):
      log("[recv corrupt packet]")
  else:
    log("[error] timeout")
    jsonPacket = list_packets[-1]
    prev_packet = json.loads(jsonPacket)
    # print(prev_packet)
    prev_packet["resend"] = True

    packet = json.dumps(prev_packet)
    if sock.sendto(packet.encode(), dest) < len(packet):
      log("[error] unable to fully send packet")
    else:
      log("[send data] " + str(prev_packet['sequence']) + " (" + str(prev_packet['data length']) + ")")

log("Send eof")
for i in range(5):
  sock.sendto(json.dumps({"eof": True, "data": "", "sequence": SEQUENCE, "ack": False}).encode(), dest)

  
