#!/usr/bin/python3 -u
#


import sys
import socket
import time
import datetime
import select
import json

from base64 import b64decode

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " 4254recv: " + string + "\n")

MSG_SIZE = 1500
TIMEOUT = 30

# Bind to localhost and an ephemeral port
UDP_IP = "127.0.0.1"
UDP_PORT = int(sys.argv[1])

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(TIMEOUT)
sequence = []
# Get port we bound to
UDP_PORT = sock.getsockname()[1]
log("[bound] " + str(UDP_PORT))

# Now listen for packets
while True:
  try:
    result = sock.recvfrom(MSG_SIZE)
  except socket.timeout:
    result = None
  # If nothing is ready, we hit the timeout
  if result:
    (data, addr) = result # note, data is bytes, so we must convert back to string before use

    try:
      decoded = json.loads(data.decode())

      # If the EOF flag is set, exit
      if (decoded['eof']):
        log("[completed]")
        sys.exit(0)

      # If there is data, we accept it and print it out
      if (decoded['data']):
        data = b64decode(decoded['data'].encode())
        # If we receive data, we assume it's in-order
        # You will need to do much more here
        # check if the new packet arrive is duplicate or not
        new_packet = decoded['sequence']
        # if the new packet arrive is not in the list
        if new_packet not in sequence:

          log("[recv data] " + str(decoded['sequence']) + " (" + str(len(data)) + ") ACCEPTED (in-order)")
          sequence.append(decoded['sequence'])
          sys.stdout.buffer.write(data)
          # Send back an ack to the sender
          msg = json.dumps({"ack": decoded['sequence'] + len(data)})
          log("ABOUT TO SEND " + msg)
          if sock.sendto(msg.encode(), addr) < len(msg):
            log("[error] unable to fully send packet")
        # the new packet arrive is in the list which mean that it's a duplicate packet, we will not send back ack
        else:
          log("got the duplicate packet, will not send back ack")

    except (ValueError, KeyError, TypeError) as e:
      log("[recv corrupt packet]")
      raise e
  else:
    log("[error] timeout")
    sys.exit(-1)
